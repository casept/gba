#include "macros.s"

TEST_ALL(testMul0, _(mul r3, r2), _(ldr r3, =0x00000000 ; mov r2, #0xFF),)
TEST_ALL(testMul1, _(mul r3, r2), _(ldr r3, =0x00000078 ; mov r2, #0xFF),)
TEST_ALL(testMul2, _(mul r3, r2), _(ldr r3, =0x00005678 ; mov r2, #0xFF),)
TEST_ALL(testMul3, _(mul r3, r2), _(ldr r3, =0x00345678 ; mov r2, #0xFF),)
TEST_ALL(testMul4, _(mul r3, r2), _(ldr r3, =0x12345678 ; mov r2, #0xFF),)
TEST_ALL(testMul5, _(mul r3, r2), _(ldr r3, =0xFF000000 ; mov r2, #0xFF),)
TEST_ALL(testMul6, _(mul r3, r2), _(ldr r3, =0xFFFF0000 ; mov r2, #0xFF),)
TEST_ALL(testMul7, _(mul r3, r2), _(ldr r3, =0xFFFFFF00 ; mov r2, #0xFF),)
TEST_ALL(testMul8, _(mul r3, r2), _(ldr r3, =0xFFFFFFFF ; mov r2, #0xFF),)
TEST_ALL(testMul9, _(mul r3, r2), _(ldr r3, =0xFFFFFFFF ; mov r2, #0x00),)

TEST_ARM(testMla0, _(mla r2, r3, r2, r3), _(ldr r3, =0x00000000 ; mov r2, #0xFF),)
TEST_ARM(testMla1, _(mla r2, r3, r2, r3), _(ldr r3, =0x00000078 ; mov r2, #0xFF),)
TEST_ARM(testMla2, _(mla r2, r3, r2, r3), _(ldr r3, =0x00005678 ; mov r2, #0xFF),)
TEST_ARM(testMla3, _(mla r2, r3, r2, r3), _(ldr r3, =0x00345678 ; mov r2, #0xFF),)
TEST_ARM(testMla4, _(mla r2, r3, r2, r3), _(ldr r3, =0x12345678 ; mov r2, #0xFF),)
TEST_ARM(testMla5, _(mla r2, r3, r2, r3), _(ldr r3, =0xFF000000 ; mov r2, #0xFF),)
TEST_ARM(testMla6, _(mla r2, r3, r2, r3), _(ldr r3, =0xFFFF0000 ; mov r2, #0xFF),)
TEST_ARM(testMla7, _(mla r2, r3, r2, r3), _(ldr r3, =0xFFFFFF00 ; mov r2, #0xFF),)
TEST_ARM(testMla8, _(mla r2, r3, r2, r3), _(ldr r3, =0xFFFFFFFF ; mov r2, #0xFF),)
TEST_ARM(testMla9, _(mla r2, r3, r2, r3), _(ldr r3, =0xFFFFFFFF ; mov r2, #0x00),)

TEST_ARM(testSmull0, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00000000 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull1, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00000078 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull2, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00005678 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull3, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00345678 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull4, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x12345678 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull5, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFF000000 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull6, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFF0000 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull7, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFFFF00 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull8, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFFFFFF ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmull9, _(smull r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFFFFFF ; mov r2, #0x00), _(pop {r4, r5}))

TEST_ARM(testSmlal0, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00000000 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal1, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00000078 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal2, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00005678 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal3, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x00345678 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal4, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0x12345678 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal5, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFF000000 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal6, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFF0000 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal7, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFFFF00 ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal8, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFFFFFF ; mov r2, #0xFF), _(pop {r4, r5}))
TEST_ARM(testSmlal9, _(smlal r4, r5, r3, r2), _(push {r4, r5}; ldr r3, =0xFFFFFFFF ; mov r2, #0x00), _(pop {r4, r5}))
